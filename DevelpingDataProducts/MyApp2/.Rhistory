View(product2)
View(product2)
View(education)
education[education$Income.Group == "",]$Income.Group <- NA
education2 <- na.omit(education)
education2 <- na.omit(education$Income.Group)
education2 <- education[,!is.na(education$Income.Group)]
education2 <- education[!is.na(education$Income.Group),]
View(product2)
product[product$Gross.domestic.product.2012 == "",]$Gross.domestic.product.2012 <- NA
product2 <- product[,!is.na(product$Gross.domestic.product.2012)]
product2 <- product[!is.na(product$Gross.domestic.product.2012),]
mergeDF <- merge(product2, education, by.x = "X", by.y = "CountryCode")
View(mergeDF)
order(mergeDF, X3, decreasing = TRUE)
order(mergeDF, mergeDF$X3, decreasing = TRUE)
order(mergeDF, mergeDF$X3, decreasing = TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(url, destfile = "product.csv", mode = "wb")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url, destfile = "education.csv", mode = "wb")
product <- read.csv("product.csv")
education <- read.csv("education.csv")
View(education)
View(product)
product <- product[,c(1,2,4,5)]
View(product)
product <- product[1:235,]
View(product)
product[product$X.2 == ""]$X.2 <- NA
product[product$X.2 == "",]$X.2 <- NA
product <- na.omit(product)
n <- product[1,]
n
n
n <- product[3,]
n
n <- product[1,]
names(product) <- n
View(product)
View(n)
n <- as.vector(product[1,])
View(n)
n <- as.vector(product[1,1:4])
n <- as.array(n)
n <- as.vector(n)
n <- product[1,]
n <- as.vector(n)
n <- as.vector(n)
names(product) <- c("CountryCode","Ranking","Country", "GDP")
product2 <- product[-1,]
View(product2)
product <- product[-1,]
View(education)
mergeDF <- merge(product, education, by = "CountryCode")
View(mergeDF)
mergeDF2 <- mergeDF[order(mergeDF$GDP),]
View(mergeDF2)
rownames(mergeDF2) <- c(1:nrow(mergeDF2))
mergeDF2$GDP <- as.numeric(mergeDF2$GDP)
mergeDF2 <- mergeDF[order(mergeDF$GDP),]
install.packages("stringr")
library(stringr)
str <- str_replace_all(mergeDF2$GDP, pattern = ",", replacement = '""')
head(str,20)
str[2]
str <- str_replace_all(mergeDF2$GDP, pattern = ",", replacement = "")
str[2]
head(str,20)
mergeDF2$GDP <- str_replace_all(mergeDF2$GDP, pattern = ",", replacement = "")
mergeDF2$GDP <- as.numeric(mergeDF2$GDP)
mergeDF2 <- mergeDF[order(mergeDF$GDP),]
mergeDF2$GDP <- str_replace_all(mergeDF2$GDP, pattern = ",", replacement = "")
mergeDF2$GDP <- as.numeric(mergeDF2$GDP)
mergeDF2 <- mergeDF2[order(mergeDF$GDP),]
mergeDF2 <- mergeDF2[order(mergeDF$GDP),]
mergeDF2 <- mergeDF2[order(mergeDF$Ranking),]
View(mergeDF2)
mergeDF2 <- mergeDF2[,order(mergeDF$Ranking)]
mergeDF2 <- mergeDF2[order(mergeDF$Ranking),]
mergeDF2 <- mergeDF2[order(mergeDF2$Ranking),]
mergeDF2 <- mergeDF2[order(mergeDF2$GDP),]
rownames(mergeDF2) <- c(1:nrow(mergeDF2))
count <- is.na(mergeDF2$GDP)
sum(count)
count <- !is.na(mergeDF2$GDP)
sum(count)
mergeDF2[mergeDF2$Ranking == "",]$Ranking <- NA
count <- !is.na(mergeDF2$Ranking)
sum(count)
data <- mergeDF2[!is.na(mergeDF2$Ranking),]
View(data)
install.packages("dplyr")
library(dplyr)
income <- filter(data, Income.Group == "High income: OECD" | Income.Group == "High income: nonOECD")
View(income)
summarise(income)
summarise(income,mean)
OECD <- group_by(income, Income.Group)
summarise(mean = mean(Income.Group))
OECD <- group_by(income, Income.Group)
summarise(mean = mean(Income.Group))
OECD <- group_by(income, Income.Group)
summarise(Income.Group = mean(Income.Group))
OECD <- group_by(income, Income.Group)
summarise(mean = mean(GDP))
OECD <- group_by(income, Income.Group) %>%
summarise(mean = mean(GDP))
View(OECD)
OECD <- group_by(income, Income.Group) %>%
summarise(mean = mean(Ranking))
income$Ranking <- as.numeric(income$Ranking)
OECD <- group_by(income, Income.Group) %>%
summarise(mean = mean(Ranking))
OECD
View(OECD)
View(mergeDF2)
View(data)
View(OECD)
View(OECD)
View(income)
View(mergeDF)
View(income)
View(mergeDF2)
mergeDF2$Ranking <- as.numeric(mergeDF2$Ranking)
mergeDF2 <- mergeDF2[order(mergeDF2$Ranking),]
mergeDF2 <- mergeDF2[order(mergeDF2$GDP),]
View(data)
data$Ranking <- as.numeric(income$data)
data$Ranking <- as.numeric(data$Ranking)
OECD <- group_by(data, Income.Group) %>%
summarise(mean = mean(Ranking))
View(OECD)
View(data)
data$Ranking <- 1:nrow(data)
data$Ranking <- nrow(data):1
OECD <- group_by(data, Income.Group) %>%
summarise(mean = mean(Ranking))
View(OECD)
data$Ranking <- cut(data$Ranking, breaks = quantile(data$Ranking))
table(data$Ranking, data$Income.Group)
data$GDP <- as.numeric(data$GDP)
table(data$Ranking, data$Income.Group)
data$Ranking <- cut2(data$Ranking, g=5))
data$Ranking <- cut2(data$Ranking, g=5)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
data$Ranking <- cut2(data$Ranking, g=5)
table(data$Ranking, data$Income.Group)
data$Ranking <- cut(data$Ranking, breaks = c(0.20, 0.40, 0.60, 0.80))
data$Ranking <- cut(data$Ranking, breaks = quantile(data$Ranking, prob = c(0.20, 0.40, 0.60, 0.80)))
data$Ranking <- cut(data$Ranking, breaks = quantile(data$Ranking)
table(data$Ranking, data$Income.Group)
table(data$Ranking, data$Income.Group)
f5 <- filter(data, Income.Group == "Lower middle income")
View(f5)
View(mergeDF2)
f5 <- filter(mergeDF2, Income.Group == "Lower middle income")
View(f5)
f5 <- f5[order(f5$Ranking),]
View(data)
View(mergeDF)
f5 <- filter(mergeDF, Income.Group == "Lower middle income")
f5 <- f5[order(f5$Ranking),]
f5$Ranking <- as.numeric(f5$Ranking)
f5 <- f5[order(f5$Ranking),]
f5 <- filter(mergeDF, Income.Group == "Lower middle income")
View(github_token)
View(req)
clearConsole()
View(github_token)
ls()
rm(list = ls())
install.packages("nlme")
install.packages("lattice")
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("RColorBrewer")
library(ggplot2)
library(dplyr)
week <- weekdays(newdata$date, abbreviate = TRUE)
qnorm(0.95, mean = 1100, sd + 75)
qnorm(0.95, mean = 1100, sd = 75)
?qnorm
rnorm(100, 1100, 75)
d <- rnorm(100, 1100, 75)
quantile(0.95, d)
quantile(0.95, d)
quantile(d, 0.95)
replicate()
r <- replicate(1000, qnorm(0.95, mean = 1100, sd = 75))
r <- replicate(1000,  rnorm(100, 1100, 75)
)
dim(r)
n <- apply(r, 2, function(x) quantile(x, 0.95))
plot(n)
hist(n)
mean(n)
1/2 ^5
?qnorm
pnorm(14, 15, 10)
pnorm(14, 15, 10) - pnorm(16, 15, 10)
pnorm(16, 15, 10)
pnorm(15, 15, 10)
pnorm(16, 15, 10)
r <- replicate(1000,  rnorm(100, 15, 10))
n <- apply(r, 2, function(x) mean(x))
mean(n)
l <- n < 16 & 14 < n
mean(l)
ppois(10, lambda = 5 * 3)
75/(100)^-1
qnorm(0.95, 1100, 7.5)
1100 + c(-1,1) * qt(.95, 8) * 30 / sqrt(9)
-2 + c(-1,1) * qt(.95, 8) * 1.5 / sqrt(9)
-2 + c(-1,1) * qt(.95, 8) * 2.60 / sqrt(9)
-2 + c(-1,1) * qt(.95, 8) * 2.10 / sqrt(9)
3-5 + c(-1,1) * qt(.95, 18) * sqrt(9*)
sp <- sqrt(9 * sqrt(0.60)^2 + 9 * sqrt(.68)^2)
3-5 + c(-1,1) * qt(.95, 18) * sp * (1/9 + 1/9)^.5
sp <- sqrt(9 * sqrt(0.60)^2 + 9 * sqrt(.68)^2/18)
3-5 + c(-1,1) * qt(.95, 18) * sp * (1/9 + 1/9)^.5
sp <- (9*0.6 + 9*.68)/18
3-5 + c(-1,1) * qt(.95, 18) * sqrt(sp) * (1/9 + 1/9)^.5
sp <- sqrt((8 * 1.5^2 + 8*1.8^2)/(16))
-3-2 + c(-1,1) * qt(0.90, 16) * sp * (1/8+1/8)^0.5
-5 + c(-1,1) * qt(0.90, 16) * sp * (1/8+1/8)^0.5
1100 + C(-1,1) * qt(.95, 8) * 30 / sqrt(9)
1100 + c(-1,1) * qt(.95, 8) * 30 / sqrt(9)
x <- c(0.18, -1.54, 0.42, 0.95)
mu <- c(0.1471, 0.0025, 0.3, 1.077)
for (i in 1:4) {
sum((x-mu[i])^2)
}
x <- c(0.18, -1.54, 0.42, 0.95)
mu <- c(0.1471, 0.0025, 0.3, 1.077)
for (i in 1:4) {
print(sum((x-mu[i])^2))
}
#2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data("mtcars")
lm(mtcars$mpg ~ mtcars$wt)
#4
sx <- 1
sy <- 2
cor <- 0.5
beta1 <- cor * sy/sx
beta1
#5
1.5*0.4
#6
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
scale(x)
scale(x)
scale(x)
(x[1] - mean(x)) / sd(x)
#7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mu <- c(0.8,0.44, 0.573, 0.36)
for (i in 1:4) {
print(sum((x-mu[i])^2))
}
#1
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
#1
x <- c(0.18, -1.54, 0.42, 0.95)
mu <- c(0.1471, 0.0025, 0.3, 1.077)
w <- c(2,1,3,1)
for (i in 1:4) {
print(sum(w*(x-mu[i])^2))
}
#2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ I(x-mean(x))
lm(y ~ (x-mean(x))
lm(y ~ (x-mean(x))
lm(y ~ x - 1)
#2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x - 1)
#7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
View(mtcars)
fit <- lm(mpg ~ wt + cyl ,data = mtcars)
summary(fit)
fit <- lm(mpg ~ wt + as.factor(cyl) ,data = mtcars)
summary(fit)
fit2 <- lm(mpg ~ as.factor(cyl) ,data = mtcars)
summary(fit2)
fit3 <- lm(mpg ~ wt + as.factor(cyl)*as.factor(cyl) ,data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ wt * as.factor(cyl) ,data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ wt * as.factor(cyl) - 1,data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ wt * as.factor(cyl) ,data = mtcars)
fit3 <- lm(mpg ~ wt * as.factor(cyl) ,data = mtcars)
summary(fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm.influence(y~x)
hatvalues(y~x)
fit5 <- lm(y~x)
summary(influence.measures(fit5)
summary(influence.measures(fit5))
summary(influence.measures(fit5))
anova(fit, fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(testing, inTrain)
inTrain
View(mixtures)
View(testing)
library(Hmisc)
value <- cut2(testing$CompressiveStrength, g=3)
View(testing)
row.names(testing)
qplot(testing$CompressiveStrength, row.names(testing), color = value)
hist(testing$Superplasticizer)
hist(log10(testing$Superplasticizer))
hist(testing$Superplasticizer)
preProcess(training,thresh = 0.80)
a <- preProcess(training,thresh = 0.80)
View(a)
a
View(training)
View(training)
View(concrete)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(testing)
select(testing, "IL")
library(dplyr)
select(testing, "IL")
library(stringr)
data(AlzheimerDisease)
filter(training, str_detect(colnames(training), "^IL"))
colnames(training)
str_detect(colnames(training), "^IL")
select(training,str_detect(colnames(training), "^IL")
dsa
select(training,(str_detect(colnames(training), "^IL"))
asa
select(training,(str_detect(colnames(training), "^IL")))
filter(training,(str_detect(colnames(training), "^IL")))
length(str_detect(colnames(training), "^IL"))
training[,(str_detect(colnames(training), "^IL"))]
select(training, starts_with("IL"))
library(dplyr)
select(training, starts_with("IL"))
## Q1
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
View(adData)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(caret)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
## Q2
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
library(Hmisc)
View(testing)
View(testing)
value <- cut2(testing, g=9)
## Q4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a <- select(training, starts_with("IL"))
library(dplyr)
a <- select(training, starts_with("IL"))
preProcess(a, thresh = 0.80)
## Q5
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a <- select(training, starts_with(c("IL","diagnosis")))
a <- select(training, c(starts_with("IL")),"diagnosis")
View(a)
a <- select(training, c("diagnosis", starts_with("IL")))
View(a)
train(a$diagnosis ~., method = "glm", preProcess = "pca", data = a)
## Q5
library(caret)
train(a$diagnosis ~., method = "glm", preProcess = "pca", data = a)
## Q5
library(kernlab)
train(a$diagnosis ~., method = "glm", preProcess = "pca", data = a)
library(e1071)
install.packages("e1071")
library(e1071)
train(a$diagnosis ~., method = "glm", preProcess = "pca", data = a)
modelFit <- train(a$diagnosis ~., method = "glm", preProcess = "pca", data = a)
modelFit <- train(a$diagnosis ~ ., method = "glm", preProcess = "pca", data = a)
View(a)
## Q5
library(kernlab)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- select(training, c("diagnosis", starts_with("IL")))
testing <- select(testing, c("diagnosis", starts_with("IL")))
modelFit <- train(a\training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = training)
View(training)
PCA <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca", data = training)
## Q1
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
fit_RF <- train(y~., method = "rpart", data = wowel.train)
fit_RF <- train(y~., method = "rpart", data = vowel.train)
fit_Boosted <- train(y~., method = "gbm", data = vowel.train)
fit_RF <- train(y~., method = "rpart", data = vowel.train)
fit_Boosted <- train(y~., method = "gbm", data = vowel.train)
install.packages("Shiny")
install.packages("shiny")
install.packages("GoogleVis")
install.packages("googleVis")
install.packages("plotly")
library(shiny)
shiny::runApp('C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/MyApp')
runApp('C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/MyApp2')
runApp('C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/MyApp2')
runApp('C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/MyApp2')
runApp()
setwd("C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/MyApp2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("miniUI")
runApp('C:/Users/Keita/OneDrive/DataScience/DevelpingDataProducts/Mini2')
install.packages("leaflet")
